options {
  JDK_VERSION = "1.8";
  STATIC = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(Parser)
package silverchain.parser;

import java.util.ArrayList;
import java.util.List;
import silverchain.grammar.*;

public final class Parser {

  private static Range range(ASTNode left, ASTNode right) {
    right = right == null ? left : right;
    return new Range(left.range().begin(), right.range().end());
  }

  private static Range range(ASTNode left, Token token, ASTNode right) {
    if (right == null) {
      return new Range(left.range().begin(), range(token).end());
    }
    return range(left, right);
  }

  private static Range range(ASTNode node, Token token) {
    if (token == null) {
      return node.range();
    }
    if (node == null) {
      return range(token);
    }
    return new Range(node.range().begin(), range(token).end());
  }

  private static Range range(Token token, ASTNode node) {
    if (node == null) {
      return range(token);
    }
    return new Range(range(token).begin(), node.range().end());
  }

  private static Range range(Token token1, Token token2) {
    return new Range(range(token1).begin(), range(token2).end());
  }

  private static Range range(Token token) {
    return new Range(
      new Location(token.beginLine, token.beginColumn),
      new Location(token.endLine, token.endColumn)
    );
  }
}

PARSER_END(Parser)

SKIP : { " " | "\t" | "\r" | "\n" | "\f" | <"#" (~["\r", "\n"])*> }

TOKEN: { < NAME: (["a"-"z","A"-"Z"])+ > | < NUMBER: "0" | ["1"-"9"](["0"-"9"])* > }

Grammars grammars(): {
  Grammar grammar;
  Grammars grammars = null;
} {
  grammar = grammar() (grammars = grammars())? <EOF> {
    return new Grammars(range(grammar, grammars), grammar, grammars);
  }
}

Grammar grammar(): {
  Type type;
  Token colon;
  Rules rules = null;
} {
  type = type() ":" { colon = jj_lastpos; } (rules = rules())? {
    return new Grammar(range(type, colon, rules), type, rules);
  }
}

Type type(): {
  QualifiedName qualifiedName;
  TypeParameters typeParameters = null;
  Token leftBracket = null;
} {
  qualifiedName = qualifiedName() ("[" typeParameters = typeParameters() "]" { leftBracket = jj_lastpos; })? {
    return new Type(range(qualifiedName, leftBracket), qualifiedName, typeParameters);
  }
}

Rules rules(): {
  Rule rule;
  Rules rules = null;
} {
  rule = rule() (rules = rules())? {
    return new Rules(range(rule, rules), rule, rules);
  }
}

Rule rule(): {
  RuleExpression ruleExpression;
  TypeReference typeReference = null;
} {
  ruleExpression = ruleExpression() (typeReference = typeReference())? ";" {
    return new Rule(range(ruleExpression, jj_lastpos), ruleExpression, typeReference);
  }
}

RuleExpression ruleExpression(): {
  RuleTerm ruleTerm;
  RuleExpression ruleExpression = null;
} {
  ruleTerm = ruleTerm() ("|" ruleExpression = ruleExpression())? {
    return new RuleExpression(range(ruleTerm, ruleExpression), ruleTerm, ruleExpression);
  }
}

RuleTerm ruleTerm(): {
  RuleFactor ruleFactor;
  RuleTerm ruleTerm = null;
} {
  ruleFactor = ruleFactor() (ruleTerm = ruleTerm())? {
    return new RuleTerm(range(ruleFactor, ruleTerm), ruleFactor, ruleTerm);
  }
}

RuleFactor ruleFactor(): {
  RuleElement ruleElement;
  RepeatOperator repeatOperator = null;
} {
  ruleElement = ruleElement() (repeatOperator = repeatOperator())? {
    return new RuleFactor(range(ruleElement, repeatOperator), ruleElement, repeatOperator);
  }
}

RuleElement ruleElement(): {
  Method method;
  RuleExpression ruleExpression;
  Token leftParenthesis;
} {
  method = method() {
    return new RuleElement(method.range(), method, null);
  } |
  "(" { leftParenthesis = token; } ruleExpression = ruleExpression() ")" {
    return new RuleElement(range(leftParenthesis, token), null, ruleExpression);
  }
}

RepeatOperator repeatOperator(): {
  Token min;
  Token max = null;
  Token leftBracket;
} {
  "*" {
    return new RepeatOperator(range(jj_lastpos), 0, null);
  } |
  "+" {
    return new RepeatOperator(range(jj_lastpos), 1, null);
  } |
  "?" {
    return new RepeatOperator(range(jj_lastpos), 0, 1);
  } |
  "{" { leftBracket = token; } min = <NUMBER> ("," max = <NUMBER>)? "}" {
    int i = Integer.parseInt(min.image);
    Integer j = max == null ? null : Integer.parseInt(max.image);
    return new RepeatOperator(range(leftBracket, token), i, j);
  }
}

Method method(): {
  Token name;
  MethodParameters methodParameters = null;
} {
  name = <NAME> "(" (methodParameters = methodParameters())? ")" {
    return new Method(range(name, jj_lastpos), name.image, methodParameters);
  }
}

MethodParameters methodParameters(): {
  MethodParameter methodParameter;
  MethodParameters methodParameters = null;
} {
  methodParameter = methodParameter() ("," methodParameters = methodParameters())? {
    return new MethodParameters(range(methodParameter, methodParameters), methodParameter, methodParameters);
  }
}

MethodParameter methodParameter(): {
  TypeReference typeReference;
  Token name;
} {
  typeReference = typeReference() name = <NAME> {
    return new MethodParameter(range(typeReference, name), typeReference, name.image);
  }
}

TypeReference typeReference(): {
  QualifiedName qualifiedName;
  TypeReferences typeReferences = null;
} {
  qualifiedName = qualifiedName() ("[" typeReferences = typeReferences() "]") ? {
    return new TypeReference(range(qualifiedName, jj_lastpos), qualifiedName, typeReferences);
  }
}

TypeReferences typeReferences(): {
  TypeReference typeReference;
  TypeReferences typeReferences = null;
} {
  typeReference = typeReference() ("," typeReferences = typeReferences())? {
    return new TypeReferences(range(typeReference, typeReferences), typeReference, typeReferences);
  }
}

TypeParameters typeParameters(): {
  TypeParameterList publicTypeParameterList;
  TypeParameterList privateTypeParameterList = null;
  Token semicolon;
} {
  publicTypeParameterList = typeParameterList() (";" privateTypeParameterList = typeParameterList())? {
    return new TypeParameters(range(publicTypeParameterList, privateTypeParameterList), publicTypeParameterList, privateTypeParameterList);
  } |
  ";" { semicolon = token; } privateTypeParameterList = typeParameterList() {
    return new TypeParameters(range(semicolon, privateTypeParameterList), null, privateTypeParameterList);
  }
}

TypeParameterList typeParameterList(): {
  TypeParameter typeParameter;
  TypeParameterList typeParameterList = null;
} {
  typeParameter = typeParameter() ("," typeParameterList = typeParameterList())? {
    return new TypeParameterList(range(typeParameter, typeParameterList), typeParameter, typeParameterList);
  }
}

TypeParameter typeParameter(): {
  Token name;
  TypeParameterBound typeParameterBound = null;
} {
  name = <NAME> (typeParameterBound = typeParameterBound())?{
    return new TypeParameter(range(name, typeParameterBound), name.image, typeParameterBound);
  }
}

TypeParameterBound typeParameterBound(): {
  Token destination = null;
  TypeReference typeReference;
} {
  ("<:" | ":>") { destination = jj_lastpos; } typeReference = typeReference() {
    return new TypeParameterBound(range(destination, typeReference), destination.image.equals("<:"), typeReference);
  }
}

QualifiedName qualifiedName(): {
  Token name;
  List<Token> names = new ArrayList<>();
} {
  name = <NAME> { names.add(name); } ("." name = <NAME> { names.add(name); })* {
    QualifiedName q = null;
    for (Token t : names) {
      q = new QualifiedName(range(q, t), q, t.image);
    }
    return q;
  }
}
