options {
  JDK_VERSION = "1.8";
  STATIC = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(Parser)
package silverchain.parser;

import java.util.ArrayList;
import java.util.List;
import silverchain.grammar.*;

public final class Parser {}

PARSER_END(Parser)

SKIP : { " " | "\t" | "\r" | "\n" | "\f" | <"#" (~["\r", "\n"])*> }

TOKEN: { < NAME: (["a"-"z","A"-"Z"])+ > | < NUMBER: "0" | ["1"-"9"](["0"-"9"])* > }

Grammars grammars(): {
  Grammar grammar;
  Grammars grammars = null;
} {
  grammar = grammar() (grammars = grammars())? <EOF> {
    return new Grammars(grammar, grammars);
  }
}

Grammar grammar(): {
  Type type;
  Rules rules = null;
} {
  type = type() ":" (rules = rules())? {
    return new Grammar(type, rules);
  }
}

Type type(): {
  QualifiedName qualifiedName;
  TypeParameters typeParameters = null;
} {
  qualifiedName = qualifiedName() ("[" typeParameters = typeParameters() "]")? {
    return new Type(qualifiedName, typeParameters);
  }
}

Rules rules(): {
  Rule rule;
  Rules rules = null;
} {
  rule = rule() (rules = rules())? {
    return new Rules(rule, rules);
  }
}

Rule rule(): {
  RuleExpression ruleExpression;
  TypeReference typeReference = null;
} {
  ruleExpression = ruleExpression() (typeReference = typeReference())? ";" {
    return new Rule(ruleExpression, typeReference);
  }
}

RuleExpression ruleExpression(): {
  RuleTerm ruleTerm;
  RuleExpression ruleExpression = null;
} {
  ruleTerm = ruleTerm() ("|" ruleExpression = ruleExpression())? {
    return new RuleExpression(ruleTerm, ruleExpression);
  }
}

RuleTerm ruleTerm(): {
  RuleFactor ruleFactor;
  RuleTerm ruleTerm = null;
} {
  ruleFactor = ruleFactor() (ruleTerm = ruleTerm())? {
    return new RuleTerm(ruleFactor, ruleTerm);
  }
}

RuleFactor ruleFactor(): {
  RuleElement ruleElement;
  RepeatOperator repeatOperator = null;
} {
  ruleElement = ruleElement() (repeatOperator = repeatOperator())? {
    return new RuleFactor(ruleElement, repeatOperator);
  }
}

RuleElement ruleElement(): {
  Method method;
  RuleExpression ruleExpression;
} {
  method = method() {
    return new RuleElement(method, null);
  } |
  "(" ruleExpression = ruleExpression() ")" {
    return new RuleElement(null, ruleExpression);
  }
}

RepeatOperator repeatOperator(): {
  Token min;
  Token max = null;
} {
  "*" {
    return new RepeatOperator(0, null);
  } |
  "+" {
    return new RepeatOperator(1, null);
  } |
  "?" {
    return new RepeatOperator(0, 1);
  } |
  "{" min = <NUMBER> ("," max = <NUMBER>)? "}" {
    int i = Integer.parseInt(min.image);
    Integer j = max == null ? null : Integer.parseInt(max.image);
    return new RepeatOperator(i, j);
  }
}

Method method(): {
  Token name;
  MethodParameters methodParameters = null;
} {
  name = <NAME> "(" (methodParameters = methodParameters())? ")" {
    return new Method(name.image, methodParameters);
  }
}

MethodParameters methodParameters(): {
  MethodParameter methodParameter;
  MethodParameters methodParameters = null;
} {
  methodParameter = methodParameter() ("," methodParameters = methodParameters())? {
    return new MethodParameters(methodParameter, methodParameters);
  }
}

MethodParameter methodParameter(): {
  TypeReference typeReference;
  Token name;
} {
  typeReference = typeReference() name = <NAME> {
    return new MethodParameter(typeReference, name.image);
  }
}

TypeReference typeReference(): {
  QualifiedName qualifiedName;
  TypeReferences typeReferences = null;
} {
  qualifiedName = qualifiedName() ("[" typeReferences = typeReferences() "]") ? {
    return new TypeReference(qualifiedName, typeReferences);
  }
}

TypeReferences typeReferences(): {
  TypeReference typeReference;
  TypeReferences typeReferences = null;
} {
  typeReference = typeReference() ("," typeReferences = typeReferences())? {
    return new TypeReferences(typeReference, typeReferences);
  }
}

TypeParameter typeParameter(): {
  Token name;
  TypeParameterBound typeParameterBound = null;
} {
  name = <NAME> (typeParameterBound = typeParameterBound())?{
    return new TypeParameter(name.image, typeParameterBound);
  }
}

TypeParameterBound typeParameterBound(): {
  TypeReference typeReference;
} {
  "<:" typeReference = typeReference() {
    return new TypeParameterBound(true, typeReference);
  } |
  ":>" typeReference = typeReference() {
    return new TypeParameterBound(false, typeReference);
  }
}

TypeParameterList typeParameterList(): {
  TypeParameter typeParameter;
  TypeParameterList typeParameterList = null;
} {
  typeParameter = typeParameter() ("," typeParameterList = typeParameterList())? {
    return new TypeParameterList(typeParameter, typeParameterList);
  }
}

TypeParameters typeParameters(): {
  TypeParameterList publicTypeParameterList;
  TypeParameterList privateTypeParameterList = null;
} {
  publicTypeParameterList = typeParameterList() (";" privateTypeParameterList = typeParameterList())? {
    return new TypeParameters(publicTypeParameterList, privateTypeParameterList);
  } |
  ";" privateTypeParameterList = typeParameterList() {
    return new TypeParameters(null, privateTypeParameterList);
  }
}

QualifiedName qualifiedName(): {
  Token name;
  List<String> list = new ArrayList<>();
} {
  name = <NAME> { list.add(name.image); } ("." name = <NAME> { list.add(name.image); })* {
    QualifiedName q = null;
    for (String s : list) {
      q = new QualifiedName(q, s);
    }
    return q;
  }
}
